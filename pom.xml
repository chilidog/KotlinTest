<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 
         http://maven.apache.org/xsd/maven-4.0.0.xsd">
    
    <modelVersion>4.0.0</modelVersion>
    
    <groupId>com.example</groupId>
    <artifactId>control-station</artifactId>
    <version>1.0.0</version>
    <packaging>jar</packaging>
    
    <name>ControlStation</name>
    <description>Your project description</description>
    
    <properties>
        <maven.compiler.source>11</maven.compiler.source>
        <maven.compiler.target>11</maven.compiler.target>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        
        <!-- Kotlin version -->
        <kotlin.version>1.9.10</kotlin.version>
        
        <!-- Plugin versions -->
        <maven-compiler-plugin.version>3.11.0</maven-compiler-plugin.version>
        <maven-surefire-plugin.version>3.1.2</maven-surefire-plugin.version>
        <exec-maven-plugin.version>3.1.0</exec-maven-plugin.version>
        
        <!-- Test dependency versions -->
        <junit.version>5.10.0</junit.version>
        <kotlin-test.version>1.9.10</kotlin-test.version>
        
        <!-- Main class for execution -->
        <main.class>SimpleControlStationKt</main.class>
        
        <!-- Universal path properties - will be overridden by profiles -->
        <source.directory>src/main/kotlin</source.directory>
        <test.source.directory>src/test/kotlin</test.source.directory>
        <resources.directory>src/main/resources</resources.directory>
        <output.directory>${project.build.directory}/classes</output.directory>
        <test.output.directory>${project.build.directory}/test-classes</test.output.directory>
    </properties>
    
    <dependencies>
        <!-- Kotlin Standard Library -->
        <dependency>
            <groupId>org.jetbrains.kotlin</groupId>
            <artifactId>kotlin-stdlib</artifactId>
            <version>${kotlin.version}</version>
        </dependency>
        
        <!-- Test Dependencies -->
        <dependency>
            <groupId>org.jetbrains.kotlin</groupId>
            <artifactId>kotlin-test-junit5</artifactId>
            <version>${kotlin-test.version}</version>
            <scope>test</scope>
        </dependency>
        
        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter</artifactId>
            <version>${junit.version}</version>
            <scope>test</scope>
        </dependency>
        
        <!-- Coroutines Dependency -->
        <dependency>
            <groupId>org.jetbrains.kotlinx</groupId>
            <artifactId>kotlinx-coroutines-core</artifactId>
            <version>1.7.3</version>
        </dependency>
        
        <!-- OkHttp for WebSocket Communication -->
        <dependency>
            <groupId>com.squareup.okhttp3</groupId>
            <artifactId>okhttp</artifactId>
            <version>4.12.0</version>
        </dependency>
        
        <!-- Jackson for JSON serialization -->
        <dependency>
            <groupId>com.fasterxml.jackson.core</groupId>
            <artifactId>jackson-databind</artifactId>
            <version>2.15.2</version>
        </dependency>
        
        <dependency>
            <groupId>com.fasterxml.jackson.module</groupId>
            <artifactId>jackson-module-kotlin</artifactId>
            <version>2.15.2</version>
        </dependency>
        
        <!-- Logging -->
        <dependency>
            <groupId>ch.qos.logback</groupId>
            <artifactId>logback-classic</artifactId>
            <version>1.4.11</version>
        </dependency>
        
        <!-- MAVLink Protocol Support -->
        <dependency>
            <groupId>io.dronefleet.mavlink</groupId>
            <artifactId>mavlink</artifactId>
            <version>1.1.9</version>
        </dependency>
        
        <!-- Serial Communication for MAVLink -->
        <dependency>
            <groupId>com.fazecast</groupId>
            <artifactId>jSerialComm</artifactId>
            <version>2.10.4</version>
        </dependency>
        
        <!-- Additional Coroutines for Flow -->
        <dependency>
            <groupId>org.jetbrains.kotlinx</groupId>
            <artifactId>kotlinx-coroutines-jdk8</artifactId>
            <version>1.7.3</version>
        </dependency>
        
        <!-- WiFiLink 2 Video Integration Dependencies -->
        
        <!-- Video Processing for WiFiLink 2 Integration -->
        <dependency>
            <groupId>org.bytedeco</groupId>
            <artifactId>javacv-platform</artifactId>
            <version>1.5.9</version>
        </dependency>
        
        <!-- Netty for High-Performance UDP Video Streaming -->
        <dependency>
            <groupId>io.netty</groupId>
            <artifactId>netty-all</artifactId>
            <version>4.1.100.Final</version>
        </dependency>
        
        <!-- FFmpeg for H.264 Video Processing -->
        <dependency>
            <groupId>org.bytedeco</groupId>
            <artifactId>ffmpeg-platform</artifactId>
            <version>6.0-1.5.9</version>
        </dependency>
        
        <!-- OpenCV for Video Analytics (Optional Enhancement) - Commented out due to dependency issues -->
        <!--
        <dependency>
            <groupId>org.bytedeco</groupId>
            <artifactId>opencv-platform</artifactId>
            <version>4.8.0-1.5.9</version>
        </dependency>
        -->
    </dependencies>
    
    <!-- Environment-aware profiles for different development environments -->
    <profiles>
        <!-- GitHub Codespaces Profile -->
        <profile>
            <id>codespace</id>
            <activation>
                <property>
                    <name>env.CODESPACES</name>
                    <value>true</value>
                </property>
            </activation>
            <properties>
                <environment.type>codespace</environment.type>
                <!-- Codespace paths are already universal -->
            </properties>
        </profile>
        
        <!-- WSL Profile -->
        <profile>
            <id>wsl</id>
            <activation>
                <os>
                    <name>Linux</name>
                </os>
                <property>
                    <name>env.WSL_DISTRO_NAME</name>
                </property>
            </activation>
            <properties>
                <environment.type>wsl</environment.type>
                <!-- Force Unix-style paths for WSL -->
                <path.separator>/</path.separator>
            </properties>
        </profile>
        
        <!-- Windows Profile -->
        <profile>
            <id>windows</id>
            <activation>
                <os>
                    <family>windows</family>
                </os>
            </activation>
            <properties>
                <environment.type>windows</environment.type>
                <path.separator>\</path.separator>
            </properties>
        </profile>
        
        <!-- Unix/Linux Profile -->
        <profile>
            <id>unix</id>
            <activation>
                <os>
                    <family>unix</family>
                </os>
            </activation>
            <properties>
                <environment.type>unix</environment.type>
                <path.separator>/</path.separator>
            </properties>
        </profile>
        
        <!-- Development Profile (can be activated manually) -->
        <profile>
            <id>dev</id>
            <properties>
                <maven.compiler.debug>true</maven.compiler.debug>
                <maven.compiler.optimize>false</maven.compiler.optimize>
            </properties>
        </profile>
        
        <!-- Production Profile (can be activated manually) -->
        <profile>
            <id>prod</id>
            <properties>
                <maven.compiler.debug>false</maven.compiler.debug>
                <maven.compiler.optimize>true</maven.compiler.optimize>
            </properties>
        </profile>
    </profiles>
    
    <build>
        <sourceDirectory>${source.directory}</sourceDirectory>
        <testSourceDirectory>${test.source.directory}</testSourceDirectory>
        <outputDirectory>${output.directory}</outputDirectory>
        <testOutputDirectory>${test.output.directory}</testOutputDirectory>
        
        <plugins>
            <!-- Kotlin Maven Plugin -->
            <plugin>
                <groupId>org.jetbrains.kotlin</groupId>
                <artifactId>kotlin-maven-plugin</artifactId>
                <version>${kotlin.version}</version>
                <executions>
                    <execution>
                        <id>compile</id>
                        <phase>compile</phase>
                        <goals>
                            <goal>compile</goal>
                        </goals>
                    </execution>
                    <execution>
                        <id>test-compile</id>
                        <phase>test-compile</phase>
                        <goals>
                            <goal>test-compile</goal>
                        </goals>
                    </execution>
                </executions>
                <configuration>
                    <jvmTarget>11</jvmTarget>
                </configuration>
            </plugin>
            
            <!-- Maven Compiler Plugin -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>${maven-compiler-plugin.version}</version>
                <configuration>
                    <source>11</source>
                    <target>11</target>
                </configuration>
            </plugin>
            
            <!-- Maven Surefire Plugin for running tests -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <version>${maven-surefire-plugin.version}</version>
                <configuration>
                    <useSystemClassLoader>false</useSystemClassLoader>
                </configuration>
            </plugin>
            
            <!-- Exec Maven Plugin for running the application -->
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>exec-maven-plugin</artifactId>
                <version>${exec-maven-plugin.version}</version>
                <configuration>
                    <mainClass>SimpleControlStationKt</mainClass>
                </configuration>
            </plugin>
        </plugins>
    </build>
    
</project>
